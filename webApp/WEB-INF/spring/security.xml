<?xml version="1.0" encoding="UTF-8"?>

<b:beans xmlns="http://www.springframework.org/schema/security"
   xmlns:b="http://www.springframework.org/schema/beans" 
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/security 
     http://www.springframework.org/schema/security/spring-security.xsd">

   <http auto-config="true">
	<!-- Declaramos todos los recursos que estaran protegidos -->
	<!-- el patron /peliculas/*, indica que todas url que tenga el prefijo peliculas -->
	<!-- se le puede dar mas de un acceso separado por ","  -->
	<intercept-url pattern="/admin/*" access="hasAnyAuthority('Administrador','Cliente')" />
	<intercept-url pattern="/usuarios/*" access="hasAnyAuthority('Administrador')" />

	
	<!-- indicando que va utilizar mi formulario y no el que spring genera de forma automatica -->
	<!-- tambien con del default-target-url se le pasa la url que mostrara al acceder -->
	 <form-login login-page="/formLogin" default-target-url="/admin/welcome"/> 
	
	</http>
   
<!-- Aqui se definen los usuario en memoria -->


   
   
   <!--Autenticacion desde una base de datos con la estructura que exigen spring security-->
    
	<!--  <authentication-manager >
		<authentication-provider>
		<jdbc-user-service data-source-ref="dataSource"></jdbc-user-service>
	</authentication-provider>
	</authentication-manager> 
	-->
	
	<!-- para encriptar con  bcrypt -->
	<b:bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" /> 
	<!--Autenticacion desde una base de datos personalizada, diferente a la que exigen spring security  -->
		<authentication-manager >
			<authentication-provider>
			<password-encoder ref="passwordEncoder"/>
			<jdbc-user-service data-source-ref="dataSource"
			users-by-username-query="select cuenta,pwd,estatus from Usuarios where cuenta = ? "
			authorities-by-username-query="SELECT u.cuenta, r.role FROM usuarios as u
											INNER JOIN userRoles AS ur ON u.id = ur.idcuenta
											INNER JOIN roles as r on r.idrole = ur.idrole
											where cuenta = ? " />
			
			</authentication-provider>
		</authentication-manager>
	
   

</b:beans>
